{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","cardArray","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f016ffc0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // if (true) {\r\n    //     throw new Error('Noooo!');\r\n    // }\r\n    console.log(\"CardList\");\r\n    const cardArray = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    });\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    console.log(\"SearchBox\");\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input\r\n                aria-label='Search Robots'\r\n                className=\"pa3 ba b--green bg-lightest-blue\" \r\n                type=\"search\" \r\n                placeholder=\"search robots\"\r\n                onChange={searchChange} />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return{ count: state.count + 1}\r\n        })  \r\n    }\r\n\r\n    render() {\r\n        console.log(\"CounterButton\");\r\n        return(\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count : {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n\r\nclass Header extends Component {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log(\"Header\");\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <CounterButton color={'red'}></CounterButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n            return isPending ? \r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className=\"tc\">\r\n                    <Header></Header>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} /> \r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>  \r\n            );\r\n        }\r\n    } \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>  response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createLogger } from 'redux-logger';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n                <Provider store={store}>\r\n                    <App /> \r\n                </Provider>, document.getElementById('root'));\r\n                \r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}